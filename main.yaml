variables:
  system.debug: 'false'
  lastCommitMessage: 'Merge pull request #6 from AliaksandrHvozdzeu/fix_notes  Fix notes'
  pr.check.id: ''
  pr.status.id: ''
  MOBILECENTER_OUTPUT_DIRECTORY: $(Build.ArtifactStagingDirectory)/build
  MOBILECENTER_BRANCH: main
  MOBILECENTER_BUILD_ID: $(Build.BuildNumber)
  MOBILECENTER_SOURCE_DIRECTORY: $(Build.Repository.LocalPath)
  MOBILECENTER_TRIGGER: continuous
  APPCENTER_OUTPUT_DIRECTORY: $(Build.ArtifactStagingDirectory)/build
  APPCENTER_BRANCH: main
  APPCENTER_BUILD_ID: $(Build.BuildNumber)
  APPCENTER_SOURCE_DIRECTORY: $(Build.Repository.LocalPath)
  APPCENTER_TRIGGER: continuous
  buildScripts.toolset: '{}'
  javaScriptRunTests: 'false'
  MOBILECENTER_REACTNATIVE_PACKAGE: package.json
  APPCENTER_REACTNATIVE_PACKAGE: package.json
  SDK: ''
  TestSDK: iphonesimulator
  MOBILECENTER_XCODE_PROJECT: ios/ReactNativeProgramm.xcworkspace
  MOBILECENTER_XCODE_SCHEME: ReactNativeProgramm
  APPCENTER_XCODE_PROJECT: ios/ReactNativeProgramm.xcworkspace
  APPCENTER_XCODE_WORKSPACE: ios/ReactNativeProgramm.xcworkspace
  APPCENTER_XCODE_SCHEME: ReactNativeProgramm
  sonoma.tags: 'continuous,javascript,xcode'
name: $(BuildID)
resources:
  repositories:
    - repository: self
      type: git
      ref: main
jobs:
  - job: Phase_1
    displayName: Build
    timeoutInMinutes: 30
    cancelTimeoutInMinutes: 0
    pool:
      name: Azure Pipelines
      vmImage: macOS-11
    steps:
      - checkout: self
        clean: true
        submodules: recursive
        lfs: true
      - task: PowerShell@2
        displayName: Install build scripts
        continueOnError: true
        inputs:
          targetType: inline
          scriptName: ''
          script: >-
            Set-Location -Path '$(Agent.HomeDirectory)'

            Invoke-WebRequest -Uri
            'https://appcenterbuildassets.azureedge.net/buildscripts/appcenter-build-assets-latest.zip'
            -OutFile 'appcenter-build-assets-latest.zip'

            if (Test-Path ./scripts) { Remove-Item -Path ./scripts -Force
            -Recurse }

            New-Item -ItemType directory -Path 'scripts' | Out-Null

            unzip -q -d 'scripts' 'appcenter-build-assets-latest.zip'

            Invoke-Expression 'bash ./scripts/init.sh'
          failOnStderr: true
      - task: Bash@3
        displayName: Select Node.js Version v2
        inputs:
          filePath: $(Agent.HomeDirectory)/scripts/select-node-version.sh
          arguments: node18
          failOnStderr: true
      - task: CmdLine@1
        displayName: yarn/npm install
        inputs:
          filename: sh
          arguments: >-
            -c "if [ -f yarn.lock ]; then { yarn install
            --network-timeout=600000 && yarn list --depth=0; } else npm install;
            fi"
      - task: CmdLine@2
        displayName: Generate source map
        inputs:
          script: >-
            #!/bin/sh

            INDEX_FILE="index.ios.js"

            if [ -f "index.js" ]; then
              INDEX_FILE="index.js"
            fi


            echo "Found $INDEX_FILE for ReactNative index."


            node --max_old_space_size=8192
            node_modules/react-native/local-cli/cli.js bundle --entry-file
            $INDEX_FILE --platform ios --dev false --reset-cache --bundle-output
            dummy-sourcemap-main.jsbundle --sourcemap-output index.ios.map
          failOnStandardError: false
      - task: CmdLine@1
        displayName: Copy source map file to staging
        inputs:
          filename: sh
          arguments: >-
            -c "mkdir -p $(build.artifactstagingdirectory)/symbols && cp
            index.ios.map $(build.artifactstagingdirectory)/symbols/"
          failOnStandardError: true
      - task: ShellScript@2
        displayName: Tag build
        inputs:
          scriptPath: $(Agent.HomeDirectory)/scripts/emit-tags.sh
          args: $(sonoma.tags)
      - task: CmdLine@1
        displayName: Set Xcode path
        inputs:
          filename: /bin/bash
          arguments: >-
            -c "sudo xcode-select --switch
            /Applications/Xcode_14.3.1.app/Contents/Developer"
      - task: CocoaPods@0
        displayName: Pod install
        inputs:
          cwd: ios
          forceRepoUpdate: true
      - task: Bash@3
        displayName: Determine project file path
        inputs:
          filePath: $(Agent.HomeDirectory)/scripts/detect-autogenerated-workspace.sh
          arguments: ios ReactNativeProgramm
          workingDirectory: $(Build.SourcesDirectory)
      - task: CmdLine@1
        displayName: Update Xcode build settings
        continueOnError: true
        inputs:
          filename: node
          arguments: >-
            $(Agent.HomeDirectory)/scripts/build-xcproject-analyzer/node_modules/@build/xcproject-analyzer-script/script/bin.js
            --app-id="9283ec6c-94b6-4c03-ba08-044fe147d2d9"
            --app-insights-key="$(AppInsightsKey)"
            --xc-workspace-path="$(APPCENTER_XCODE_WORKSPACE)"
            --scheme="ReactNativeProgramm"
          workingFolder: $(Build.SourcesDirectory)
      - task: Xcode@4
        displayName: Xcode build (not signed)
        inputs:
          actions: clean archive
          configuration: ''
          xcWorkspacePath: $(APPCENTER_XCODE_PROJECT)
          scheme: ReactNativeProgramm
          xcodeDeveloperDir: /Applications/Xcode_14.3.1.app/Contents/Developer
          packageApp: false
          archivePath: $(agent.builddirectory)/output/build/archive
          exportPath: $(agent.builddirectory)/output/build/export
          args: >-
            -archivePath
            "$(agent.builddirectory)/output/build/archive/ReactNativeProgramm.xcarchive"
          outputPattern: $(agent.builddirectory)/output/build
      - task: CopyFiles@2
        displayName: Copy build files to staging
        inputs:
          SourceFolder: $(agent.builddirectory)/output/build/archive
          TargetFolder: $(build.artifactstagingdirectory)/build
          OverWrite: true
          flattenFolders: false
      - task: CopyFiles@2
        displayName: Copy symbol files to staging
        inputs:
          SourceFolder: >-
            $(agent.builddirectory)/output/build/archive/ReactNativeProgramm.xcarchive/dSYMs
          Contents: '**/*.dSYM/**'
          TargetFolder: $(build.artifactstagingdirectory)/symbols
          OverWrite: true
      - task: PublishBuildArtifacts@1
        displayName: Publish build
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)/build
          ArtifactName: build
          TargetPath: \\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)
      - task: PublishBuildArtifacts@1
        displayName: Publish symbols
        continueOnError: true
        inputs:
          PathtoPublish: $(build.artifactstagingdirectory)/symbols
          ArtifactName: symbols
          TargetPath: \\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)
